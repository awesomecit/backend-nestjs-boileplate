services:
  prometheus:
    image: prom/prometheus:v2.40.0
    ports:
      - '${PROMETHEUS_PORT:-9090}:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:9090/-/healthy',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - monitoring
    deploy:
      replicas: 1

  grafana:
    image: grafana/grafana:9.3.0
    ports:
      - '${GRAFANA_PORT:-3000}:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_DATABASE_WAL=true
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana-storage:/var/lib/grafana
    # Healthcheck temporaneamente disabilitato per risolvere database lock
    # healthcheck:
    #   test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    networks:
      - monitoring
    deploy:
      replicas: 1

  node-exporter:
    image: prom/node-exporter:v1.5.0
    ports:
      - '${NODE_EXPORTER_PORT:-9100}:9100'
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:9100/metrics',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - monitoring
    deploy:
      mode: global

  portainer:
    image: portainer/portainer-ce:2.16.0
    ports:
      - '${PORTAINER_PORT:-9000}:9000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # NGINX web server with status module enabled
  nginx:
    image: nginx:alpine
    ports:
      - '${NGINX_PORT:-80}:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/nginx_status']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - monitoring
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # NGINX Prometheus Exporter for metrics collection
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    ports:
      - '${NGINX_EXPORTER_PORT:-9113}:9113'
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    depends_on:
      - nginx
    networks:
      - monitoring
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

networks:
  monitoring:
    driver: overlay
    attachable: true

volumes:
  grafana-storage:
    driver: local
